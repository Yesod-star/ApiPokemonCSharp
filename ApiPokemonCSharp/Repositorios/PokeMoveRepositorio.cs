using ApiPokemonCSharp.Data;
using ApiPokemonCSharp.Models;
using ApiPokemonCSharp.Repositorios.Repositorios;
using Microsoft.EntityFrameworkCore;

namespace ApiPokemonCSharp.Repositorios;

public class PokeMoveRepositorio : IPokeMoveRepositorio
{

    private readonly PokemonDbContext _dbContext;

    public PokeMoveRepositorio(PokemonDbContext sistemaTarefasDbContext)
    {
        _dbContext = sistemaTarefasDbContext;
    }

    public async Task<PokeMove> Adicionar(PokeMove TVmEntity)
    {
        await _dbContext.Moves.AddAsync(TVmEntity);
        await _dbContext.SaveChangesAsync();

        return TVmEntity;
    }

    public async Task<bool> Apagar(int id)
    {
        PokeMove PokeMoveId = await BuscarPorId(id);

        if (PokeMoveId != null)
        {
            throw new Exception($"Move for Id: {id} was not found");
        }

        _dbContext.Moves.Remove(PokeMoveId);
        await _dbContext.SaveChangesAsync();
        return true;
    }

    public async Task<PokeMove> Atualizar(PokeMove TVmEntity, int id)
    {
        PokeMove PokeMoveId = await BuscarPorId(id);

        if (PokeMoveId == null)
        {
            throw new Exception($"Move for Id: {id} was not found");
        }

        PokeMoveId.Name = TVmEntity.Name;
        PokeMoveId.Deleted = TVmEntity.Deleted;
        PokeMoveId.DeletedWhen = TVmEntity.DeletedWhen;
        PokeMoveId.Id = TVmEntity.Id;
        PokeMoveId.AttributeBuff = TVmEntity.AttributeBuff;
        PokeMoveId.AutoGeneratedCondition = TVmEntity.AutoGeneratedCondition;
        PokeMoveId.AutoGeneratedConditionChance = TVmEntity.AutoGeneratedConditionChance;
        PokeMoveId.GeneratedCondition = TVmEntity.GeneratedCondition;
        PokeMoveId.ConditionChance = TVmEntity.ConditionChance;
        PokeMoveId.Damage = TVmEntity.Damage;
        PokeMoveId.PercentageBuff = TVmEntity.PercentageBuff;
        PokeMoveId.PokeType = TVmEntity.PokeType;
        PokeMoveId.PokeTypeId = TVmEntity.PokeTypeId;
        PokeMoveId.Velocity = TVmEntity.Velocity;
        PokeMoveId.PokePokemonMoveList = TVmEntity.PokePokemonMoveList;

        _dbContext.Moves.Update(PokeMoveId);
        await _dbContext.SaveChangesAsync();

        return PokeMoveId;
    }

    public async Task<PokeMove> BuscarPorId(int id)
    {
        return await _dbContext.Moves.FirstOrDefaultAsync(x => x.Id == id);
    }

    public async Task<List<PokeMove>> BuscarTodos()
    {
        return await _dbContext.Moves.ToListAsync();
    }
}
